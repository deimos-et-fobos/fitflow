"""
Django settings for fitflow project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta  # Importado para configurar SIMPLE_JWT

# Cargar las variables de entorno desde el archivo .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

OPENAI_API_KEY1 = os.getenv("OPENAI_API_KEY1", "")
OPENAI_API_KEY2 = os.getenv("OPENAI_API_KEY2", "")
OPENAI_API_REGION = os.getenv("OPENAI_API_REGION", "")
OPENAI_API_URL = os.getenv("OPENAI_API_URL", "")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-hwj)mre0vv-x_ukp#sv!y+u$7=b7c+exxt64oy5$-^2bi4uxsh')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", True)
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
if ENVIRONMENT == 'production':
    DEBUG = False

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost,0.0.0.0").split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'multiselectfield',
    'drf_yasg',  # Swagger docs
    'corsheaders',  # Añadido para soporte CORS

    # Own apps
    'users',
    'plans',
    'progress'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Añadido y movido antes de CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # Por defecto, requiere autenticación
    ),
}

# Configuración de SIMPLE_JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Duración del access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Duración del refresh token
    'ROTATE_REFRESH_TOKENS': True,                 # Rotar refresh tokens al refrescar
    'BLACKLIST_AFTER_ROTATION': True,              # Blacklist de tokens antiguos
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=20),
    # 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

AUTH_USER_MODEL = 'users.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # o lo que vos quieras
        }
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,  # Desactiva la autenticación por sesión (cookies)
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        }
    },
}

ROOT_URLCONF = 'fitflow.urls'

TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fitflow.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if ENVIRONMENT == 'production':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', '').strip() or 'fitflow',
            'USER': os.getenv('POSTGRES_USER', '').strip() or 'postgres',
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', '').strip() or 'postgres',
            'HOST': os.getenv('POSTGRES_HOST', '').strip() or 'localhost',
            'PORT': int(os.getenv('POSTGRES_PORT', 5432)),
        }
    }
else:
    POSTGRES_REMOTE = os.getenv('POSTGRES_REMOTE', False)
    if POSTGRES_REMOTE == 'True':
        POSTGRES_URL = os.getenv('POSTGRES_URL', 'URL not provided!')
        print(f'Using remote database URL: {POSTGRES_URL}')
        DATABASES = {
            'default': dj_database_url.config(default=POSTGRES_URL)
        }
    else:
        print(f'Using local SQLite3')
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }

print(DATABASES)
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de CORS
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',
    'http://127.0.0.1:5173',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'authorization',
    'content-type',
    'x-csrftoken',
]

# Configuraciones de seguridad para producción
# if ENVIRONMENT == 'production':
#     # SECURE_SSL_REDIRECT = True  # Redirigir HTTP a HTTPS
#     # SESSION_COOKIE_SECURE = True  # Cookies solo por HTTPS
#     # CSRF_COOKIE_SECURE = True  # Cookies CSRF solo por HTTPS
#     SECURE_BROWSER_XSS_FILTER = True  # Protección contra XSS
#     SECURE_CONTENT_TYPE_NOSNIFF = True  # Evitar que el navegador interprete mal los tipos de contenido
#     SECURE_HSTS_SECONDS = 31536000  # HSTS por 1 año
#     SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#     SECURE_HSTS_PRELOAD = True